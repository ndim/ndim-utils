#!/usr/bin/python


prog = 'watch-xsel'


version_fmt = """\
%(prog)s (@PACKAGE_NAME@) @PACKAGE_VERSION@
Copyright (C) 2014,2015 Hans Ulrich Niedermann
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
"""


usage_fmt = """\
Usage: %(prog)s
       %(prog)s --urls > urls.txt
       %(prog)s --urls --unique > urls.txt
       %(prog)s --unique --append=urls.txt
       %(prog)s --unique --append urls.txt

Watch the X11 selection and print it on stdout or append to a given
file, (possibly filtered). If stdout is redirected into a file or when
appending it to a given file, the results are also printed on stderr.

Arguments:
  -h, --help             Print this usage information and exit
      --version          Print version information and exit

  -a, --append=FILE      Append to the given FILE.
  -n, --lineno           Print line number at the beginning of each line
                         printed on stderr.
      --max-lines=NO     Exit program when NO lines have been printed.
  -r, --regexp=RE        Only pass text which matches regular expression RE.
  -s, --skip-list=FILE   Ignore all selections matching any line read from FILE.
  -u, --unique           Ignore the new value if it has been printed before, or,
                         when appending to a FILE, if it has appeared in FILE.
  -U, --urls             Only pass URLs (ftp, http, https)
  -v, --verbose          Verbose debug output
      --xsel-timeout=MS  Set the X selection timeout in milliseconds
                         ('xsel -t MS').
"""


import os
import pprint
import re
import subprocess
import sys
import time


verbose = False


from abc import abstractmethod, ABCMeta


class InvalidArgumentError(RuntimeError):

    def __init__(self, arg):
        msg = 'Invalid command line argument: %s' % repr(arg)
        super(InvalidArgumentError, self).__init__(msg)


class Consumer(object):

    __metaclass__ = ABCMeta

    @abstractmethod
    def consume(self, item):
        raise NotImplementedError()


class Filter(Consumer):

    @property
    def next_consumer(self):
        return self.__next_consumer

    @next_consumer.setter
    def next_consumer(self, cons):
        if hasattr(self, '__next_consumer'):
            raise "next_consumer already set"
        self.__next_consumer = cons

    def __str__(self):
        return "%s()" % (self.__class__.__name__, )


class RegexpFilter(Filter):

    def __init__(self, regexp):
        super(RegexpFilter, self).__init__()
        self.r = regexp

    def consume(self, item):
        m = self.r.search(item)
        if m:
            self.next_consumer.consume(item)

    def __str__(self):
        return "%s(re=%s)" % (self.__class__.__name__,
                              repr(self.r.pattern), )


class UrlFilter(RegexpFilter):

    def __init__(self):
        r = re.compile(r'^(ftp|https?)://', re.IGNORECASE)
        super(UrlFilter, self).__init__(r)

    def __str__(self):
        return "%s()" % (self.__class__.__name__, )


class LineFilter(Filter):

    def __init__(self):
        super(LineFilter, self).__init__()
        self.d = self.init_filter_dict()

    @abstractmethod
    def init_filter_dict(self):
        raise NotImplementedError()

    def consume(self, item):
        if item not in self.d:
            self.next_consumer.consume(item)
            return True
        return False


class SkipListFilter(LineFilter):

    def __init__(self, skiplist_fname,
                 print_lineno=False, ignore_file_not_found=False):
        self.skiplist_fname = skiplist_fname
        self.print_lineno   = print_lineno
        self.ignore_fnf     = ignore_file_not_found
        super(SkipListFilter, self).__init__()

    @property
    def skiplist_lines(self):
        """Number of lines in the initialization file"""
        return self.__skiplist_lines

    def init_filter_dict(self):
        global verbose
        d = {}
        lineno = 0
        if self.ignore_fnf and not(os.path.exists(self.skiplist_fname)):
            self.__skiplist_lines = 0
            return d
        if verbose:
            sys.stderr.write("Skip lines from %s:\n" %
                             repr(self.skiplist_fname))
        for line in open(self.skiplist_fname, "Ur").readlines():
            sline = line.rstrip('\r\n')
            d[sline] = True
            lineno = lineno + 1
            if verbose:
                if self.print_lineno:
                    sys.stderr.write("%4d " % lineno)
                sys.stderr.write("%s\n" % repr(sline))
        if verbose:
            sys.stderr.write("Skip dict from %s:\n" %
                             repr(self.skiplist_fname))
            pprint.pprint(d, stream=sys.stderr)
        self.__skiplist_lines = lineno
        return d

    def __str__(self):
        return "%s(skiplist_fname=%s)" % (self.__class__.__name__,
                                          repr(self.skiplist_fname), )


class UniqueFilter(LineFilter):

    def __init__(self):
        super(UniqueFilter, self).__init__()

    def init_filter_dict(self):
        return {}

    def consume(self, item):
        if super(UniqueFilter, self).consume(item):
            self.d[item] = True


class NewlineFilter(Filter):

    def consume(self, item):
        if len(item) >= 1 and item[-1] != '\n':
            self.next_consumer.consume('%s\n' % item)
        else:
            self.next_consumer.consume(item)


class OutputConsumer(Consumer):

    def __init__(self, out_fname, max_lines,
                 first_lineno=None, print_lineno=False):
        super(OutputConsumer, self).__init__()

        self.max_lines = max_lines
        self.lines = 0
        self.print_lineno = print_lineno

        if first_lineno:
            self.lineno = first_lineno
        else:
            self.lineno = 1

        self.out_fname = out_fname
        if out_fname:
            self.out = open(self.out_fname, "a")
            self.stderr_echo = sys.stderr.isatty()
        else:
            self.out = sys.stdout
            self.stderr_echo = sys.stderr.isatty() and not sys.stdout.isatty()

    def consume(self, item):
        self.lines = self.lines + 1
        self.out.write(item)
        self.out.flush()
        if self.stderr_echo:
            if self.print_lineno:
                sys.stderr.write("%4d " % self.lineno)
                if len(item) >= 1 and item[-1] == "\n":
                    item = item[:-1]
                sys.stderr.write("%s\n" % item.replace("\n", "\n   . "))
            else:
                sys.stderr.write(item)
            sys.stderr.flush()
        if self.max_lines and self.lines >= self.max_lines:
            sys.exit(0)
        self.lineno = self.lineno + 1

    def __str__(self):
        if self.out_fname:
            return "%s(out=%s)" % (self.__class__.__name__,
                                   repr(self.out_fname))
        else:
            return "%s(out=%s)" % (self.__class__.__name__,
                                   'sys.stdout')


class Main(object):

    def __init__(self, args):
        super(Main, self).__init__()

        global verbose

        append_fname  = None
        filter_urls   = False
        filter_unique = False
        max_lines     = 0
        print_lineno  = False
        regexps       = []
        skip_lists    = []
        xsel_timeout  = 0

        i = 0
        while i < len(args):
            arg = args[i]
            if False:
                pass

            elif arg in ['-h', '--help']:
                self.print_usage()
                sys.exit(0)

            elif arg in ['--version']:
                self.print_version()
                sys.exit(0)

            elif arg in ['-a', '--append']:
                assert(not(append_fname))
                i = i + 1
                append_fname = args[i]
            elif arg.startswith("--append="):
                assert(not(append_fname))
                append_fname = arg.split("=", 1)[1]
            elif arg.startswith("-a="):
                assert(not(append_fname))
                append_fname = arg.split("=", 1)[1]

            elif arg in ['-n', '--lineno']:
                assert(not(print_lineno))
                print_lineno = True

            elif arg in ['--max-lines']:
                assert(not(max_lines))
                i = i + 1
                max_lines = int(args[i])
            elif arg.startswith("--max-lines="):
                assert(not(max_lines))
                max_lines = int(arg.split("=", 1)[1])

            elif arg in ['-r', '--regexp']:
                i = i + 1
                regexps.append(re.compile(args[i]))
            elif arg.startswith("--regexp="):
                regexps.append(re.compile(arg.split("=", 1)[1]))
            elif arg.startswith("-r="):
                regexps.append(re.compile(arg.split("=", 1)[1]))

            elif arg in ['-s', '--skip-list']:
                i = i + 1
                skip_lists.append(args[i])
            elif arg.startswith("--skip-list="):
                skip_lists.append(arg.split("=", 1)[1])
            elif arg.startswith("-s="):
                skip_lists.append(arg.split("=", 1)[1])

            elif arg in ['-u', '--unique']:
                assert(not(filter_unique))
                filter_unique = True

            elif arg in ['-U', '--urls']:
                assert(not(filter_urls))
                filter_urls = True

            elif arg in ['-v', '--verbose']:
                assert(not(verbose))
                verbose = True

            elif arg in ['--xsel-timeout']:
                assert(not(xsel_timeout))
                i = i + 1
                xsel_timeout = int(args[i])
            elif arg.startswith("--xsel-timeout="):
                assert(not(xsel_timeout))
                xsel_timeout = int(arg.split("=", 1)[1])

            else:
                raise InvalidArgumentError(arg)
            i = i + 1

        self.xsel_timeout = xsel_timeout

        consumers = []

        if filter_urls:
            consumers.append(UrlFilter())

        first_lineno = None
        if filter_unique:
            if append_fname:
                f = SkipListFilter(append_fname,
                                   print_lineno=print_lineno,
                                   ignore_file_not_found=True)
                consumers.append(f)
                if f.skiplist_lines is None:
                    first_lineno = None
                else:
                    first_lineno = f.skiplist_lines + 1
            consumers.append(UniqueFilter())

        for skip_list in skip_lists:
            consumers.append(SkipListFilter(skip_list,
                                            print_lineno=print_lineno))

        for r in regexps:
            consumers.append(RegexpFilter(r))

        consumers.append(NewlineFilter())

        consumers.append(OutputConsumer(out_fname=append_fname,
                                        max_lines=max_lines,
                                        first_lineno=first_lineno,
                                        print_lineno=print_lineno))

        next_cons = None
        for cons in reversed(consumers):
            if next_cons:
                cons.next_consumer = next_cons
            next_cons = cons
        self.first_consumer = next_cons

        # http://foo.bar/bleh

        if verbose:
            sys.stderr.write("Regular Expressions:\n")
            for r in regexps:
                sys.stderr.write("  * %s\n" % repr(r.pattern))

            sys.stderr.write("Filters:\n")
            c = self.first_consumer
            while True:
                sys.stderr.write("  * %s\n" % c)
                if not hasattr(c, 'next_consumer'):
                    break
                c = c.next_consumer


    def main_loop(self):
        if verbose:
            sys.stderr.write("X11 Selections:\n")

        cmdline = ['xsel', '-o']
        if self.xsel_timeout:
            cmdline.extend(['-t', str(self.xsel_timeout)])

        last_sel = None
        while True:
            new_sel = subprocess.check_output(cmdline,
                                              universal_newlines=True)
            if last_sel != new_sel:
                self.first_consumer.consume(new_sel)
                last_sel = new_sel
            time.sleep(0.5)


    def print_usage(self):
        global usage_fmt
        sys.stdout.write(usage_fmt % globals())


    def print_version(self):
        global version_fmt
        sys.stdout.write(version_fmt % globals())


if __name__ == '__main__':
    try:
        Main(sys.argv[1:]).main_loop()
    except KeyboardInterrupt:
        pass
