#!/bin/sh
# Hotplug script for handling Palm PDAs
# Written by Hans Ulrich Niedermann in 2003, 2004
#
# Functions:
# - if there is "~user/palm/backups/$(date -I)/", back up into that directory
# - if there are files in "~user/palm/upload/", they are uploaded and deleted
# - otherwise, a pppd is started
#
# If the device is disconnected prematurely, the transfer/backup/ppp process
# is killed.
#

#########################################################################
# Settings

log="/var/log/pilotusb.log"

exec 1>> "$log"
exec 2>> "$log"

symdev="/dev/pilot"

freq=2500
beeplen=50
beepdelay=80

date="$(date -I)"
user=ndim
palm_root=/home/${user}/palm
backup_root=${palm_root}/backups
backup_dir="${backup_root}/${date}"
upload_dir="${palm_root}/upload"

echo "========================================================================"
echo "$date"


########################################################################
# Find TTY this device is on

find_tty() {
    local tmp ttyno

#    if [ -c /udev/visor ]; then
#    	tty="/udev/visor"
#	echo "$tty"
#	return
#    fi

    for tmp in /proc/tty/driver/usb-serial /proc/tty/driver/usbserial
    do
	if [ -f "$tmp" ]; then
	    echo "Using usbserial: $tmp" >&2
	    usbserial="$tmp"
	    break
	fi
    done
    if [ "$usbserial" = "" ]; then
	echo "Fatal: No /proc/.../usbserial found." >&2
	exit 1
    fi

    local vendor="0830"
    local product="0060"
    local num_ports="2"
    local port="2"
    # FIXME: how do we find out which device is the one we were called for?
    tmp="$(cat "$usbserial" | grep "module:visor" | awk "/vendor:${vendor} product:${product} num_ports:${num_ports} port:${port}/ {print \$1;}" | tail -n1)"
    ttyno="$(echo "$tmp" | sed 's/://g')"
    tty="/dev/ttyUSB${ttyno}"
    if [ -c "$tty" ]; then
	echo "$tty"
	echo "Found pilot on tty device $tty" >&2
    else
	echo "No tty device found for pilot (\"$tty\")!" >&2
	exit 1
    fi
}


########################################################################
# Start PPP daemon

start_pppd() {
    local DNS EXT_IF EXT_IP PPP_IP_SELF PPP_IP_PALM PPP_PID

    echo "Starting ppp daemon."

    beep -f "$freq" -l "$beeplen" -r 3 -d "$beepdelay"

    DNS="$(awk 'BEGIN { n=0; } /^nameserver/ && (n == 0) { a[0]=$2; n=n+1; } /^nameserver/ && (n == 1) && (a[0] != $2) { a[1]=$2; n=n+1; } END {print a[0]" "a[1];}' < /etc/resolv.conf)"
    if echo "$DNS" | grep -qE "[0-9]"; then
    	DNS="ms-dns $DNS"
    fi

    # Device to default route, assuming 193.7.176.1 is routed over the default route
    EXT_IF="$(ip -4 route get 193.7.176.1 | grep ' dev ' | sed 's#^.* dev \([^ ]\+\).*$#\1#g')"
    EXT_IP="$(ip -4 addr show dev "${EXT_IF}" | awk '($1 == "inet") { split($2, a, /\//); print a[1]; exit; }')"

    PPP_IP_SELF="10.0.0.1"
    PPP_IP_PALM="10.20.30.40"
    
    echo 1 > /proc/sys/net/ipv4/ip_forward

    iptables -t nat -D POSTROUTING -o "${EXT_IF}" -s "${PPP_IP_PALM}" -j SNAT --to-source "$EXT_IP" || echo "Ignore this error."
    iptables -t nat -A POSTROUTING -o "${EXT_IF}" -s "${PPP_IP_PALM}" -j SNAT --to-source "$EXT_IP" \
	|| exit $?

    echo "Running:"
    echo "/usr/sbin/pppd "${tty}" "${PPP_IP_SELF}:${PPP_IP_PALM}" passive \
	local noauth debug nodeflate nobsdcomp noccp nopcomp \
	nodetach ${DNS}"
    echo "tty: \"$tty\""
    echo "extif: \"$EXT_IF\""
    echo "extip: \"$EXT_IP\""

    /usr/sbin/pppd "${tty}" "${PPP_IP_SELF}:${PPP_IP_PALM}" passive \
	local noauth debug nodeflate nobsdcomp noccp nopcomp \
	nodetach ${DNS} &

    sleep 1
    PPP_PID="$!"
    echo "pppd has PID ${PPP_PID}"

    cat>>"$REMOVER"<<EOF
#!/bin/sh

# exec output redirection doesn't work here
# exec 2>> "$log"
# echo 1>> "$log"

date="\$(date)"
echo "\$date removing pppd stuff" >> "$log"
echo "killing pppd ${PPP_PID}" >> "$log"

if ! kill "${PPP_PID}" >> "$log" 2>&1; then
	echo "kill-9ing pppd ${PPP_PID}" >> "$log"
	kill -9 "${PPP_PID}" >> "$log" 2>&1
fi

echo "pppd killed. Removing SNAT entry and routing." >> "$log"

iptables -t nat -D POSTROUTING -o "${EXT_IF}" -s "${PPP_IP_PALM}" \
    -j SNAT --to-source "$EXT_IP" >> "$log" 2>&1
echo 0 > /proc/sys/net/ipv4/ip_forward

echo "Cleanup finished." >> "$log"

beep -f "$freq" -l "$beeplen" -r 3 -D "$beepdelay" >> "$log" 2>&1
beep -f "$[ $freq / 2 ]" -l "$[ 2*$beeplen ]" -r 1 >> "$log" 2>&1
EOF
    chmod +x "$REMOVER"
    echo "Wrote cleanup script to $REMOVER"
}


########################################################################
# set permissions

set_permissions() {
    echo "Setting permissions."
    chown "$user" "$tty"
}


########################################################################
# Setup symlink

setup_symlink() {
    echo "Setting up symlink from $tty to $symdev"
    rm -f "$symdev"
    ln -s "$tty" "$symdev"
}


########################################################################
# Execute backup

execute_backup() {
    set_permissions
    echo "Starting backup."
    beep -f "$freq" -l "$beeplen" -r 1 -d "$beepdelay"
    su - "$user" -c "pilot-xfer -p '${tty}' -b '${backup_dir}'" &
    XFER_PID="$!"
    echo "Running pilot-xfer for backup (pid ${XFER_PID}, in background)."
    cat>>"$REMOVER"<<EOF
    kill "$XFER_PID" >> "$log" 2>&1 || kill -9 "$XFER_PID" >> "$log" 2>&1
    chown 0 "$tty" 2>&1
    beep -f "$freq" -l "$beeplen" -r 1 -D "$beepdelay" >> "$log" 2>&1
    beep -f "$[ $freq / 2 ]" -l "$[ 2*$beeplen ]" -r 1 >> "$log" 2>&1
EOF
    chmod +x "$REMOVER"
    echo "Wrote cleanup script to $REMOVER"
}


########################################################################
# Upload files

upload_files() {
    set_permissions
    echo "Starting file upload."
    beep -f "$freq" -l "$beeplen" -r 2 -d "$beepdelay"
    su - "$user" -c "pilot-xfer -p '${tty}' -i ${upload_dir}/*" &
    XFER_PID="$!"
    echo "Running pilot-xfer for upload (pid ${XFER_PID}, in background)."
    cat>>"$REMOVER"<<EOF
    kill "$XFER_PID" >> "$log" 2>&1 || kill -9 "$XFER_PID" >> "$log" 2>&1
    if cd "${upload_dir}"; then
    	if [ "${upload_dir}" = "\$(pwd)" ]; then
	    rm -f *
	fi
    fi
    chown 0 "$tty" 2>&1
    beep -f "$freq" -l "$beeplen" -r 2 -D "$beepdelay" >> "$log" 2>&1
    beep -f "$[ $freq / 2 ]" -l "$[ 2*$beeplen ]" -r 1 >> "$log" 2>&1
EOF
    chmod +x "$REMOVER"
    echo "Wrote cleanup script to $REMOVER"
}


########################################################################
# Try everything

try_everything() {
    echo "Trying everything."
    if [ -d "${backup_dir}" ] && [ "$(ls -1 "${backup_dir}/" | wc -l)" -eq 0 ]; then
        # If there is an empty directory, do our backup to it
	execute_backup
    elif [ -d "${upload_dir}" ] && [ "$(ls -1 "${upload_dir}/" | wc -l)" -gt 0 ]; then
        # non-empty upload directory exists
	upload_files
    else
	start_pppd
    fi
}


########################################################################
# Main program

# default config
mode="permissions-only"

# read config file
for configfile in \
    @configdir@/pilot-usb \
    /etc/default/pilot-usb \
    /etc/sysconfig/pilot-usb
  do
  if [ -f "$configfile" ]; then
      echo "Reading config file $configfile"
      . "$configfile"
      break
  fi
done

if tty="$(find_tty)"
then
    chown 0.0 "$tty"
    chmod 0600 "$tty"
else
    exit 1
fi

case "$mode" in
    permissions-only)
	set_permissions
	setup_symlink
	# No cleanup script, because there is no way we can know what
	# is going to be done with the device and for how long.
	;;
    ppp-only)
	start_pppd
	;;
    try-everything)	
	try_everything
	;;
    *)
	echo "Unhandled mode: $mode"
	exit 1
	;;
esac

exit 0
